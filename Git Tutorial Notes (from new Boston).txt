** From thenewboston git tutorial**
-----------------------------------
Git Bash will be UNIX operating.
Commands:
	ls - look at files / folders in the currenty directory
	cd - current directory
	cd .. - go back one directory
	'ls -la' - looks at all the files in the directory, including the invisible files

Git Commands:
	git init - creates that directory as a GIT repository. Everything in the folder will be tracked for GIT.
	git commit -m "" - creates a snapshot of your code. Similar to save button. Commits are how you get back
			   to certain points in time.
	git log - tells you what has been happening in that specific folder for GIT
	git status - tells you the status of that GIT directory (ex: untracked/new files added)
	git add __name of file__ (ex: git add test.py). This will add the specific file to the staging area
		working copy > staging area > repository
			Staging area: these are the files that are ready to get committed. Repo is end goal.
	git diff - shows you the difference in code when looking at a modified file vs. the old one. Can only be used
		   if you have the red modified in git status
	git rm __name of file__ - removes the file. You'll need to commit that file after
	git mv __old file__ __new file__ - this will move an old file to the new file (similar to overwriting)
	git checkout -- __file name__ - checkout means take something from repo and make it your working copy.

Q: How to edit files?
A: Edit the file, git status to see if it detects the edits, git add __name of file__ (this will add to STAGING AREA)
   git commit -m "", now make sure it's inserted and do git status to check if it's good.

Q: How to edit multiple files?
A: git status, git add . (staging area), git commit -m "", git status to check.

Q: View the changes you are making?
A: git status, see if there's a 'red' modified file, if there is you can view changes by using git diff. Then you can add and commit

Q: How to compare staging area with the repo?
A: git diff --staged

Q: Delete files?
A: git rm __name of file__, git commit -m "" after

Q: How to rename files?
A: If you rename a file, Git believes it's been removed and you added a new file, so that's what we do
   git add _new file name__, git rm __old file name__, check git status to see that it's renaming, git commit
   **You can move the file and it is the same thing as renaming

Q: How to move files?
A: git mv __old file__ __new file__ (this is like renaming a file)

Q: Move file into directory
A: git mv __pudding.txt__ __LoveNotes/patty.txt__ (this will move pudding into LoveNotes and rename it patty), git status, git commit

Q: Commit directly to repo? (skip staging area)
A: git status (check modifications), git commit -am ""

Q: Undo changes from working directory and get files back from repo (old verisons)
A: git status (check if red modified), git checkout -- __file name__

Q: Unstage files ? (bring back down to working copy)
A: git reset HEAD __file name__ (that one from staging area)

Q: Getting old verisons from repo
A: check git log to see the list of commits, make a copy of the commit you want: git checkout 01e7... -- __file name__
   git status, git commit -am "undo..."

Q: Undo files from working directory? (committed files that weren't suppose to be)
A: git checkout -- __file name__

* GITHUB *
----------

Git Commands (for Github):
	git push -u 'nickname' master - Pushes the files to the GitHub Server



1. Create new repository (on github website)
	a. DO NOT initialize w/ README if you already initialized it in the directory/folder
2. Get directory ready and up-to-date.
3. Set-up connection from local comp to github (remote).
	a. git remote add 'nickname' __URL address_
4. git push (giving them to the server)
	a. git push -u 'nickname' master
